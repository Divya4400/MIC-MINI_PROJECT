/* globals define */
/* eslint-env node */

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Wed Dec 14 2022 09:13:28 GMT+0000 (Coordinated Universal Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'module'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,) {

    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);
    
    /**
     * Initializes a new instance of PythonBindings.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin PythonBindings.
     * @constructor
     */

    function PNPlugin() {
        
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */

    PNPlugin.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    PNPlugin.prototype = Object.create(PluginBase.prototype);
    PNPlugin.prototype.constructor = PNPlugin;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(null|Error|string, plugin.PluginResult)} callback - the result callback
     */

   PNPlugin.prototype.main = function (callback) {
       const self = this;
       // Using the logger.
       //print the debug message.
       self.logger.debug('This is a debug message.');
       //print the info message.
       self.logger.info('This is an info message.');
       //print the warning message.
       self.logger.warn('This is a warning message.');
       //print the error message.
       self.logger.error('This is an error message.');

   };

   return PNPlugin;
   
});
